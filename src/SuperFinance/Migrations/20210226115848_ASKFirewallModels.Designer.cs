// <auto-generated />
using System;
using ASKSource.DataModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SuperFinance.DataModels;

namespace ASKSource.Migrations
{
	[DbContext(typeof(DemoDbContext))]
	[Migration("20210226115848_ASKFirewallModels")]
	partial class ASKFirewallModels
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "3.1.6")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("ASKSource.DataModels.DbCulture", b =>
			{
				b.Property<string>("CultureCode")
					.HasColumnType("nvarchar(20)")
					.HasMaxLength(20);

				b.Property<string>("DisplayName")
					.IsRequired()
					.HasColumnType("nvarchar(75)")
					.HasMaxLength(75);

				b.HasKey("CultureCode");

				b.ToTable("Culture");
			});

			modelBuilder.Entity("ASKSource.DataModels.DbFirewallRule", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<DateTime>("CreatedDate")
						.HasColumnType("datetime2");

					b.Property<string>("EntityUrn")
						.IsRequired()
						.HasColumnType("nvarchar(72)")
						.HasMaxLength(72);

					b.Property<string>("IpFrom")
						.IsRequired()
						.HasColumnType("nvarchar(45)")
						.HasMaxLength(45);

					b.Property<string>("IpTo")
						.HasColumnType("nvarchar(45)")
						.HasMaxLength(45);

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(50)")
						.HasMaxLength(50);

					b.HasKey("Id");

					b.HasIndex("EntityUrn", "Name")
						.IsUnique()
						.HasName("UK_FirewallRule_EntityUrn_Name");

					b.ToTable("FirewallRule");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbImpliedPermission", b =>
				{
					b.Property<string>("PermissionCode")
						.HasColumnType("nvarchar(40)")
						.HasMaxLength(40);

					b.Property<string>("ImpliedPermissionCode")
						.HasColumnType("nvarchar(40)")
						.HasMaxLength(40);

					b.HasKey("PermissionCode", "ImpliedPermissionCode");

					b.HasIndex("ImpliedPermissionCode");

					b.ToTable("ImpliedPermission");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbPermission", b =>
				{
					b.Property<string>("PermissionCode")
						.HasColumnType("nvarchar(40)")
						.HasMaxLength(40);

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<string>("EntityTypeCode")
						.IsRequired()
						.HasColumnType("nvarchar(30)")
						.HasMaxLength(30);

					b.Property<int>("Kind")
						.HasColumnType("int");

					b.HasKey("PermissionCode");

					b.ToTable("Permission");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbSuspendedEntity", b =>
			{
				b.Property<Guid>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("uniqueidentifier");

				b.Property<DateTime>("CreatedDate")
					.HasColumnType("datetime2");

				b.Property<Guid>("EntityId")
					.HasColumnType("uniqueidentifier");

				b.Property<string>("EntityType")
					.IsRequired()
					.HasColumnType("nvarchar(30)")
					.HasMaxLength(30);

				b.Property<string>("SuspensionType")
					.IsRequired()
					.HasColumnType("nvarchar(30)")
					.HasMaxLength(30);

				b.HasKey("Id");

				b.ToTable("SuspendedEntity");
			});

			modelBuilder.Entity("ASKSource.DataModels.DbSuspensionExclusionRule", b =>
			{
				b.Property<Guid>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("uniqueidentifier");

				b.Property<string>("EntityTypePattern")
					.IsRequired()
					.HasColumnType("nvarchar(128)")
					.HasMaxLength(128);

				b.Property<string>("OperationPattern")
					.IsRequired()
					.HasColumnType("nvarchar(512)")
					.HasMaxLength(512);

				b.Property<string>("PossessesAnyOfThePermissions")
					.HasColumnType("nvarchar(512)")
					.HasMaxLength(512);

				b.Property<string>("SuspensionTypePattern")
					.IsRequired()
					.HasColumnType("nvarchar(128)")
					.HasMaxLength(128);

				b.Property<string>("VerbPattern")
					.IsRequired()
					.HasColumnType("nvarchar(30)")
					.HasMaxLength(30);

				b.HasKey("Id");

				b.ToTable("SuspensionExclusionRule");
			});

			modelBuilder.Entity("ASKSource.DataModels.DbTimeZone", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("DisplayName")
					.IsRequired()
					.HasColumnType("nvarchar(100)")
					.HasMaxLength(100);

				b.Property<string>("TimeZoneCode")
					.IsRequired()
					.HasColumnType("nvarchar(60)")
					.HasMaxLength(60);

				b.HasKey("Id");

				b.HasIndex("TimeZoneCode")
					.IsUnique();

				b.ToTable("TimeZone");
			});

			modelBuilder.Entity("ASKSource.DataModels.DbUser", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<DateTime>("CreatedDate")
						.HasColumnType("datetime2");

					b.Property<string>("CultureCode")
						.IsRequired()
						.HasColumnType("nvarchar(20)")
						.HasMaxLength(20);

					b.Property<bool>("FirewallEnabled")
						.HasColumnType("bit");

					b.Property<string>("HashedPassword")
						.IsRequired()
						.HasColumnType("nvarchar(128)")
						.HasMaxLength(128);

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(60)")
						.HasMaxLength(60);

					b.Property<Guid?>("ParentId")
						.HasColumnType("uniqueidentifier");

					b.Property<bool>("PasswordBlocked")
						.HasColumnType("bit");

					b.Property<DateTime?>("PasswordBlockedDate")
						.HasColumnType("datetime2");

					b.Property<string>("PasswordBlockedReason")
						.HasColumnType("nvarchar(max)");

					b.Property<DateTime?>("PasswordExpiredAt")
						.HasColumnType("datetime2");

					b.Property<string>("PasswordResetToken")
						.HasColumnType("nvarchar(36)")
						.HasMaxLength(36);

					b.Property<DateTime?>("PasswordResetTokenExpiredAt")
						.HasColumnType("datetime2");

					b.Property<bool>("Suspended")
						.HasColumnType("bit");

					b.Property<DateTime?>("SuspensionDate")
						.HasColumnType("datetime2");

					b.Property<string>("SuspensionReason")
						.HasColumnType("nvarchar(max)");

					b.Property<int>("TimeZoneId")
						.HasColumnType("int");

					b.Property<string>("Username")
						.IsRequired()
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<string>("VerificationToken")
						.IsRequired()
						.HasColumnType("nvarchar(36)")
						.HasMaxLength(36);

					b.Property<bool>("Verified")
						.HasColumnType("bit");

					b.HasKey("Id");

					b.HasIndex("CultureCode");

					b.HasIndex("ParentId");

					b.HasIndex("TimeZoneId");

					b.HasIndex("Username")
						.IsUnique();

					b.ToTable("User");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUserPermit", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<Guid?>("EntityId")
						.HasColumnType("uniqueidentifier");

					b.Property<string>("PermissionCode")
						.IsRequired()
						.HasColumnType("nvarchar(40)")
						.HasMaxLength(40);

					b.Property<Guid>("UserPermitGroupId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("Id");

					b.HasIndex("PermissionCode");

					b.HasIndex("UserPermitGroupId", "PermissionCode", "EntityId")
						.IsUnique()
						.HasName("UK_UserPermit_UserPermitGroupId_PermissionCode_EntityId");

					b.ToTable("UserPermit");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUserPermitGroup", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<string>("GroupName")
						.IsRequired()
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("Id");

					b.HasIndex("UserId", "GroupName")
						.IsUnique()
						.HasName("UK_UserPermitGroup_UserId_GroupName");

					b.ToTable("UserPermitGroup");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUserSession", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<string>("Device")
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<DateTime>("EffectiveFrom")
						.HasColumnType("datetime2");

					b.Property<DateTime?>("ExpiredOn")
						.HasColumnType("datetime2");

					b.Property<Guid?>("ImpersonatedUserId")
						.HasColumnType("uniqueidentifier");

					b.Property<string>("Ip")
						.HasColumnType("nvarchar(40)")
						.HasMaxLength(40);

					b.Property<string>("Location")
						.HasColumnType("nvarchar(100)")
						.HasMaxLength(100);

					b.Property<string>("Secret")
						.IsRequired()
						.HasColumnType("nvarchar(44)")
						.HasMaxLength(44);

					b.Property<int?>("SlideByDurationInMinutes")
						.HasColumnType("int");

					b.Property<bool>("SlidingExpiration")
						.HasColumnType("bit");

					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("Id");

					b.HasIndex("Secret")
						.IsUnique();

					b.HasIndex("UserId");

					b.ToTable("UserSession");
				});

			modelBuilder.Entity("ASKSource.DataModels.DbImpliedPermission", b =>
				{
					b.HasOne("ASKSource.DataModels.DbPermission", "Implied")
						.WithMany("IAmImplied")
						.HasForeignKey("ImpliedPermissionCode")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();

					b.HasOne("ASKSource.DataModels.DbPermission", "Permission")
						.WithMany("MyImplied")
						.HasForeignKey("PermissionCode")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUser", b =>
				{
					b.HasOne("ASKSource.DataModels.DbCulture", "Culture")
						.WithMany()
						.HasForeignKey("CultureCode")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();

					b.HasOne("ASKSource.DataModels.DbUser", "Parent")
						.WithMany()
						.HasForeignKey("ParentId")
						.OnDelete(DeleteBehavior.NoAction);

					b.HasOne("ASKSource.DataModels.DbTimeZone", "TimeZone")
						.WithMany()
						.HasForeignKey("TimeZoneId")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUserPermit", b =>
				{
					b.HasOne("ASKSource.DataModels.DbPermission", "Permission")
						.WithMany("Permits")
						.HasForeignKey("PermissionCode")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();

					b.HasOne("ASKSource.DataModels.DbUserPermitGroup", "UserPermitGroup")
						.WithMany("Permits")
						.HasForeignKey("UserPermitGroupId")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUserPermitGroup", b =>
				{
					b.HasOne("ASKSource.DataModels.DbUser", "User")
						.WithMany("PermitGroups")
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();
				});

			modelBuilder.Entity("ASKSource.DataModels.DbUserSession", b =>
				{
					b.HasOne("ASKSource.DataModels.DbUser", "User")
						.WithMany("Sessions")
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.NoAction)
						.IsRequired();
				});
#pragma warning restore 612, 618
		}
	}
}
